#include <Wire.h>
#include <ESP8266WiFi.h>

const int MPU_SCL = D1;  // SCL pin of MPU6050 connected to D1
const int MPU_SDA = D2;  // SDA pin of MPU6050 connected to D2
const int buzzer = D3;   // Buzzer connected to D3 of NodeMCU

int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;
float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0;
boolean fall = false;  // stores if a fall has occurred
boolean trigger1 = false;  // stores if first trigger (lower threshold) has occurred
boolean trigger2 = false;  // stores if second trigger (upper threshold) has occurred
boolean trigger3 = false;  // stores if third trigger (orientation change) has occurred
byte trigger1count = 0;  // stores the counts past since trigger 1 was set true
byte trigger2count = 0;  // stores the counts past since trigger 2 was set true
byte trigger3count = 0;  // stores the counts past since trigger 3 was set true
int angleChange = 0;

float smoothedAmp = 0;
const float alpha = 0.9; // Smoothing factor (between 0 and 1)

void setup() {
  Serial.begin(115200);
  pinMode(buzzer, OUTPUT);

  // Setup pin modes
  pinMode(buzzer, OUTPUT);
  digitalWrite(buzzer, LOW); // Ensure buzzer is off at start

  // Initialize I2C communication
  Wire.begin(MPU_SDA, MPU_SCL);
  
  // Check if MPU6050 is connected successfully
  Wire.beginTransmission(0x68);  // MPU-6050 I2C address
  if (Wire.endTransmission() == 0) {
    Serial.println("MPU6050 connected successfully.");
  } else {
    Serial.println("Failed to connect to MPU6050.");
    while (1); // Halt the program if MPU6050 is not connected
  }

  // Wake up MPU6050
  Wire.beginTransmission(0x68);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);

  Serial.println("IMU Initialized");
}

void loop() {
  mpu_read();
  ax = (AcX - 2050) / 16384.00;
  ay = (AcY - 77) / 16384.00;
  az = (AcZ - 1947) / 16384.00;
  gx = (GyX + 270) / 131.07;
  gy = (GyY - 351) / 131.07;
  gz = (GyZ + 136) / 131.07;

   digitalWrite(buzzer, HIGH);  // Turn on the buzzer
  delay(2000);  // Wait for 2 seconds
  digitalWrite(buzzer, LOW);  // Turn off the buzzer
  delay(5000);//delay of 5 sec

  // Calculating Amplitude vector for 3 axis
  float Raw_Amp = pow(pow(ax, 2) + pow(ay, 2) + pow(az, 2), 0.5);
  int Amp = Raw_Amp * 10;  // Multiplied by 10 because values are between 0 to 1

  // Apply smoothing to the amplitude
  smoothedAmp = alpha * smoothedAmp + (1 - alpha) * Amp;
  Serial.println(smoothedAmp);

  // Adjust threshold checks to use smoothedAmp instead of Amp
  if (smoothedAmp <= 4 && trigger2 == false) { // Adjusted threshold
    trigger1 = true;
    Serial.println("TRIGGER 1 ACTIVATED");
  }
  
  if (trigger1 == true) {
    trigger1count++;
    if (smoothedAmp >= 12) { // if AM breaks upper threshold (3g)
      trigger2 = true;
      Serial.println("TRIGGER 2 ACTIVATED");
      trigger1 = false; 
      trigger1count = 0;
    }
  }
  
  if (trigger2 == true) {
    trigger2count++;
    angleChange = pow(pow(gx, 2) + pow(gy, 2) + pow(gz, 2), 0.5);
    Serial.println(angleChange);
    if (angleChange >= 30 && angleChange <= 400) { // if orientation changes by between 80-100 degrees
      trigger3 = true;
      trigger2 = false; 
      trigger2count = 0;
      Serial.println(angleChange);
      Serial.println("TRIGGER 3 ACTIVATED");
    }
  }

  if (trigger3 == true) {
    trigger3count++;
    if (trigger3count >= 10) { 
      angleChange = pow(pow(gx, 2) + pow(gy, 2) + pow(gz, 2), 0.5);
      Serial.println(angleChange); 
      if ((angleChange >= 0) && (angleChange <= 10)) { // if orientation changes remain between 0-10 degrees
        fall = true;
        trigger3 = false;
        trigger3count = 0;
        Serial.println(angleChange);
      } else { // user regained normal orientation
        trigger3 = false; 
        trigger3count = 0;
        Serial.println("TRIGGER 3 DEACTIVATED");
      }
    }
  }

  if (fall == true) { // in event of a fall detection
    Serial.println("MOTION DETECTED - BUZZER ACTIVATED");
    digitalWrite(buzzer, HIGH); // Turn on buzzer
    delay(1000); // Buzzer sound duration
    digitalWrite(buzzer, LOW);  // Turn off buzzer
    fall = false;
  }
  
  if (trigger2count >= 6) { // allow 0.5s for orientation change
    trigger2 = false; 
    trigger2count = 0;
    Serial.println("TRIGGER 2 DEACTIVATED");
  }
  
  if (trigger1count >= 6) { // allow 0.5s for AM to break upper threshold
    trigger1 = false; 
    trigger1count = 0;
    Serial.println("TRIGGER 1 DEACTIVATED");
  }

  delay(100);
}

void mpu_read() {
  Wire.beginTransmission(0x68);  // MPU-6050 I2C address
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(0x68, 14, true);  // request a total of 14 registers

  AcX = Wire.read() << 8 | Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)    
  AcY = Wire.read() << 8 | Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ = Wire.read() << 8 | Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  Tmp = Wire.read() << 8 | Wire.read();  // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  GyX = Wire.read() << 8 | Wire.read();  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY = Wire.read() << 8 | Wire.read();  // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ = Wire.read() << 8 | Wire.read();  // 0x47 (GYRO_ZOUT_H) & 0x48Â (GYRO_ZOUT_L)
}